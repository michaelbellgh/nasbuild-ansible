---
 - name: Configure VPN VM
   gather_facts: false
   hosts: esxi
   tasks:

    - name: Load VM variables
      include_vars:
        file: ../../data/vpnvm/vars/vpnvm.yml
        name: vm_vars
    
    
    - name: Get VM fact
      vmware_vm_facts:
        hostname: "{{ hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ vm_vars.options.validate_certs }}"      
      delegate_to: localhost
      register: vmfacts
      until: '{{ vmfacts.virtual_machines | json_query(query) != "" }}'
      retries: 30
      vars:
        query: "[?guest_name=='{{ vm_vars.vminfo.vm_id }}'].ip_address" 
      delay: 60

    - name: Register VM Object (2.7)
      set_fact:
        vm_obj: vmfacts.virtual_machines[vm_vars.vminfo.vm_id]
      when: ansible_version.full < '2.8.1'

    - name: Register VM Object (2.8)
      set_fact:
        vm_obj: '{{ vmfacts.virtual_machines | json_query(query) }}'
      when: ansible_version.full >= '2.8.1'
      vars:
        query: "[?guest_name=='{{ vm_vars.vminfo.vm_id }}']"

      
    - name: Add hosts
      add_host:
        name: "{{ vm_obj[0].ip_address }}"
        ansible_ssh_user: "{{ vm_vars.creds.guest_user }}"
        password: "{{ vm_vars.creds.guest_pass }}"
        ansible_ssh_pass: "{{ vm_vars.creds.guest_pass }}"
        ansible_become: yes
        ansible_become_user: root
        ansible_become_method: sudo
        ansible_sudo_pass: "{{ vm_vars.creds.guest_pass }}"
        ansible_become_pass: "{{ vm_vars.creds.guest_pass }}"
        guest_user: "{{ vm_vars.creds.guest_user }}"
        guest_pass: "{{ vm_vars.creds.guest_pass }}"
        groups: vpn
        
 - name: Configure VPNVM (implementation stage)
   gather_facts: false
   hosts: vpn
   become: yes
   tasks:

    - name: Ignore host key on first run
      set_fact:
        ansible_ssh_extra_args: '-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
          
    - name: Load VM variables
      include_vars:
        file: ../../data/vpnvm/vars/vpnvm.yml
        name: vm_vars


    - name: Copy all required pre install files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
      become: yes
      with_items:
       - { src: "../../data/vpnvm/ssl/rootca.crt", dest: "/usr/local/share/ca-certificates/" }
       - { src: "../../data/vpnvm/ssl/userca.crt", dest: "/usr/local/share/ca-certificates/" }
       - { src: "../../data/vpnvm/ssl/intermediate.crt", dest: "/usr/local/share/ca-certificates/" }
       - { src: "../../data/vpnvm/static-netplan.yaml", dest: "/etc/netplan/01-netcfg.yaml" }

    - name: Update base packages and upgrade
      apt:
        update_cache: yes
        upgrade: yes
        state: latest
        cache_valid_time: 86400
      ignore_errors: yes        
      become: yes

    - name: Install additional packages
      apt:
        update_cache: yes
        name:
        - openvpn
        - ca-certificates
        - unzip
        - iptables-persistent
        state: present
      become: yes
      ignore_errors: yes

    - name: Download OpenVPN configs
      get_url:
        url: "https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip"
        dest: "/tmp/ovpn.zip"
        mode: '744'

    - name: Unzip OpenVPN configs
      unarchive:
        src: /tmp/ovpn.zip
        dest: /etc/openvpn/
        remote_src: yes
      
    - name: Create Password File
      lineinfile:
        line: "{{ item }}"
        dest: "/etc/openvpn/pass.txt"
        create: yes
      with_items:
        - "{{ vm_vars.creds.openvpn_username }}"
        - "{{ vm_vars.creds.openvpn_password }}"


    - name: Add login line to all files (Bash)
      script:
        cmd: "../../data/vpnvm/scripts/openvpn_udp.sh"

    - name: Add login line to all files (TCP)
      script:
        cmd: "../../data/vpnvm/scripts/openvpn_tcp.sh"
    
    - name: Enable global routing
      lineinfile:
        dest: "/etc/sysctl.conf"
        line: "net.ipv4.ip_forward=1"
    
    - name: Enable NAT masquerade
      shell:
        cmd: "iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE"

    
    - name: Enable IPTables forwarding
      shell:
        cmd: "iptables -A FORWARD -i tun0 -o {{ item.device }} -m state --state RELATED,ESTABLISHED -j ACCEPT && sudo iptables -A FORWARD -i {{ item.device }} -o tun0 -j ACCEPT"
      with_items:
       - "{{ vm_vars.vminfo.routes }}"

    - name: Enable persistent iptables forwarding
      command: "netfilter-persistent save"

    - name: Enable iptables persistence service
      systemd:
        name: "netfilter-persistent"
        enabled: yes

    - name: Copy OVPN file
      copy:
        src: "/etc/openvpn/ovpn_{{ vm_vars.vpninfo.protocol }}/{{ vm_vars.vpninfo.vpn_server }}.{{ vm_vars.vpninfo.protocol }}.ovpn"
        dest: "/etc/openvpn/{{ vm_vars.vpninfo.vpn_server }}.{{ vm_vars.vpninfo.protocol }}.ovpn.conf"
        force: yes
        remote_src: yes

    - name: Enable persistent OpenVPN service
      systemd:
        name: "openvpn@{{ vm_vars.vpninfo.vpn_server }}.{{ vm_vars.vpninfo.protocol }}.ovpn"
        enabled: yes

    - name: Reboot
      reboot: