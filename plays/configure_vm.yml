---
 - name: Configuring nas (pre stage)
   gather_facts: false
   hosts: esxi
   tasks:    

    - name: Load vm variables
      include_vars:
        file: ../data/nas/vars/vm.yml
        name: vm_vars

    - name: Get VM fact
      vmware_vm_facts:
        hostname: "{{ hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        validate_certs: "{{ vm_vars.options.validate_certs }}"      
      delegate_to: localhost
      register: vmfacts
      until: '{{ vmfacts.virtual_machines | json_query(query) != "" }}'
      retries: 30
      vars:
        query: "[?guest_name=='{{ vm_vars.vminfo.vm_id }}'].ip_address" 
      delay: 60

    - name: Register VM Object (2.7)
      set_fact:
        vm_obj: vmfacts.virtual_machines[vm_vars.vminfo.vm_id]
      when: ansible_version.full < '2.8.1'

    - name: Register VM Object (2.8)
      set_fact:
        vm_obj: '{{ vmfacts.virtual_machines | json_query(query) }}'
      when: ansible_version.full >= '2.8.1'
      vars:
        query: "[?guest_name=='{{ vm_vars.vminfo.vm_id }}']"

      
    - name: Add hosts
      add_host:
        name: "{{ vm_obj[0].ip_address }}"
        ansible_ssh_user: "{{ vm_vars.creds.guest_user }}"
        password: "{{ vm_vars.creds.guest_pass }}"
        ansible_ssh_pass: "{{ vm_vars.creds.guest_pass }}"
        ansible_become: yes
        ansible_become_pass: "{{ vm_vars.creds.guest_pass }}"
        guest_user: "{{ vm_vars.creds.guest_user }}"
        guest_pass: "{{ vm_vars.creds.guest_pass }}"
        groups: nas
        
 - name: Configure NAS (implementation stage)
   gather_facts: false
   connection: local
   hosts: nas
   tasks:

    - name: Ignore host key on first run
      set_fact:
        ansible_ssh_extra_args: '-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
        
   
    - name: Copy all required pre install files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
      become: yes
      with_items:
       - { src: "../data/nas/ssl/rootca.crt", dest: "/usr/local/share/ca-certificates/" }
       - { src: "../data/nas/sources.list", dest: "/etc/apt/sources.list" }
       - { src: "../data/nas/plex/plexmediaserver.list", dest: "/etc/apt/sources.list.d/plexmediaserver.list" }
       - { src: "../data/nas/mono/mono-official-stable.list", dest: "/etc/apt/sources.list.d/mono-official-stable.list" }
       - { src: "../data/nas/Ombi/ombi.list", dest: "/etc/apt/sources.list.d/ombi.list" }
       - { src: "../data/nas/sonarr/sonarr.list", dest: "/etc/apt/sources.list.d/sonarr.list" }
       - { src: "../data/nas/additional_hosts", dest: "/etc/additional_hosts" }

    
    

        
        
    
    - name: Run pre commands
      command: "{{ item }}"
      become: yes
      with_items:
       - "dpkg --configure -a"
       - "update-ca-certificates"
    
    
    
    - name: Add all apt keys (shell)
      shell: "{{ item }}"
      become: yes
      ignore_errors: yes
      with_items:
       - "curl https://downloads.plex.tv/plex-keys/PlexSign.key | apt-key add -"
       - "wget -qO - https://repo.ombi.turd.me/pubkey.txt | sudo apt-key add -a"
       
    - name: Add apt keys (sonarr, mono)
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: "{{ item }}"
      become: yes
      with_items:
       - "a236c58f409091a18aca53cbebff6b99d9b78493"
       - "3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF"
       
    - name: Add PPA repos
      apt_repository:
        repo: ppa:transmissionbt/ppa
        state: present
        update_cache: no
      become: yes
    
    #Sets IPv4 preference for DNS, extended sockets for Transmission
    - name: Set system settings
      lineinfile:
        path: "{{ item.path }}"
        line: "{{ item.line }}"
      become: yes
      with_items:
       - { path: "/etc/gai.conf", line: "precedence ::ffff:0:0/96  100" }
       - { path: "/etc/sysctl.conf", line: "net.core.rmem_max = 4194304" }
       - { path: "/etc/sysctl.conf", line: "net.core.wmem_max = 1048576" }
          
    - name: Set hostname
      hostname:
        name: "{{ vm_vars.vminfo.hostname }}"
        
    # Customise items with your own mountpoints
    - name: Make storage drives mountpoints
      file:
        path: "{{ item }}"
        state: directory
      with_items:
       - /mnt/Storage
       - /mnt/NAS
       
    - name: Edit fstab (Need to uncomment after disks have been added manually)
      lineinfile:
        path: /etc/fstab
        line: "{{ item }}"
      with_items:
       - "#/dev/sdb1 /mnt/Storage ext4 defaults 0 0"
       - "#/dev/sdc1 /mnt/NAS ext4 defaults 0 0"      
       
    - name: Make service user group
      group:
        name: "{{ vm_vars.vminfo.service_user }}"
        state: present
        
    - name: Make service_user user
      user:
        name: "{{ vm_vars.vminfo.service_user }}"
        groups: "{{ vm_vars.vminfo.service_user }}"
        state: present
    

            
       
    - name: Configure Sonarr
      block:       
       - stat:
          path: "/home/{{ vm_vars.vminfo.service_user }}/.config/NzbDrone"
         register: sonarr_config_exists
       - file:
           state: absent
           path: "/home/{{ vm_vars.vminfo.service_user }}/.config/NzbDrone"
         become: yes
         when: not sonarr_config_exists.stat.exists
       - copy:
           src: ../data/nas/sonarr/NzbDrone
           dest: "/home/{{ vm_vars.vminfo.service_user }}/.config/"
           force: yes
           owner: "{{ vm_vars.vminfo.service_user }}"
           group: "{{ vm_vars.vminfo.service_user }}"
         become: yes
         when: not sonarr_config_exists.stat.exists
         
         
    - name: Update base packages and upgrade
      apt:
        update_cache: yes
        upgrade: yes
        state: latest
        cache_valid_time: 86400
      ignore_errors: yes        
      become: yes     

     
    - name: Install additional packages
      apt:
        update_cache: yes
        name:
        - unzip        
        - transmission-cli
        - transmission-common
        - git-core
        - ombi
        - transmission-daemon
        - plexmediaserver
        - nzbdrone
        - minidlna
        - composer
        - php
        - php-zip
        - sqlite
        - php-mbstring
        - php-xml
        - php-common
        - php-sqlite3
        - python-lxml
        - python-pip
        - samba
        - dnsmasq
        - mono-complete
        - libcurl4-openssl-dev
        - apache2
        - python-pip
        - python3-pip
        - libchromaprint-tools
        state: present
      become: yes
      ignore_errors: yes
      
    - name: Stop transmission (holds lock on config)
      systemd:
        daemon_reload: yes
        name: transmission-daemon
        state: stopped
      become: yes   
      
    - name: Upgrade pip, pyopenssl for python2
      pip:
        name:
          - pip
          - configparser
          - lxml
          - beautifulsoup4
          - requests
          
    - name: Upgrade pip, pyopenssl for python3
      pip:
        name:
          - pip
          - configparser
          - lxml
          - beautifulsoup4
          - requests
        executable: "/usr/bin/pip3"
        
    - name: Download files
      get_url:
        url: "{{ item.url }}"
        dest: "{{ item.dest }}"
        tmp_dest: /tmp/
        validate_certs: yes
      become: yes
      with_items:
       - { url: "https://github.com/Jackett/Jackett/releases/download/v0.11.387/Jackett.Binaries.LinuxAMDx64.tar.gz", dest: "/tmp/Jackett.Binaries.LinuxAMDx64.tar.gz" }
       - { url: "https://github.com/linuxserver/Heimdall/archive/2.1.13.zip", dest: "/tmp/heimdall.zip" }
       - { url: "https://github.com/lidarr/Lidarr/releases/download/v0.5.0.583/Lidarr.develop.0.5.0.583.linux.tar.gz", dest: "/tmp/Lidarr.tar.gz" }
       - { url: "https://github.com/Radarr/Radarr/releases/download/v0.2.0.1358/Radarr.develop.0.2.0.1358.linux.tar.gz", dest: "/tmp/Radarr.tar.gz" }
      
      
    - name: Check if CouchPotato exists
      stat:
        path: /opt/CouchPotato
      register: couchpotato_exists
      
    - name: Install CouchPotato
      shell: "git clone https://github.com/CouchPotato/CouchPotatoServer.git /opt/CouchPotato"
      become: yes
      when: not couchpotato_exists.stat.exists
      
      
    - name: Check if Jackett exists
      stat:
        path: /opt/Jackett
      register: jackett_exists
      
    - name: Download jackett
      get_url:
        url: "https://github.com/Jackett/Jackett/releases/download/v0.11.327/Jackett.Binaries.LinuxAMDx64.tar.gz"
        dest: /tmp/Jackett.Binaries.LinuxAMDx64.tar.gz
      become: yes
      when: not jackett_exists.stat.exists
      
    - name: Extract jackett
      unarchive:
        src: "/tmp/Jackett.Binaries.LinuxAMDx64.tar.gz"
        dest: /opt/
        remote_src: yes
      become: yes
      when: not jackett_exists.stat.exists
        
    - name: Install jackett service
      command: "bash /opt/Jackett/install_service_systemd.sh"
      become: yes
      
    - name: Reconfigure Jackett service
      replace: 
        path: /etc/systemd/system/jackett.service
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      become: yes
      with_items:
       - { regexp: "User=UNKNOWN", replace: "User={{ vm_vars.vminfo.service_user }}" }
       - { regexp: "Group=UNKNOWN", replace: "Group={{ vm_vars.vminfo.service_user }}" }
        

    - name: Install heimdall requirements
      composer:
        command: require
        global_command: yes
        arguments: laravel/installer
     
    - name: Update composer components
      composer:
        command: update
        global_command: yes      
      
    - name: Extract heimdall
      unarchive:
        src: /tmp/heimdall.zip
        dest: /opt/
        remote_src: yes
        
    - name: Rename heimdall folder
      command: mv /opt/Heimdall-2.1.13 /opt/heimdall
      args:
        creates: /opt/heimdall
        removes: /opt/Heimdall-2.1.13
      become: yes        
      
      
    - name: Unarchive Lidarr
      unarchive:
        src: "/tmp/Lidarr.tar.gz"
        dest: "/opt/"
        remote_src: yes
      become: yes

    - name: Unarchive Radarr
      unarchive:
        src: "/tmp/Radarr.tar.gz"
        dest: "/opt/"
        remote_src: yes
      become: yes
      
    - name: Enable Apache2 modules
      apache2_module:
        state: present
        name: "{{ item }}"
      become: yes  
      with_items:
       - "headers"
       - "rewrite"
      
      
    - name: Copy systemd unit files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
      become: yes
      with_items:
       - { src: "../data/nas/services/sonarr.service", dest: "/lib/systemd/system/sonarr.service" }
       - { src: "../data/nas/services/ombi.service", dest: "/lib/systemd/system/ombi.service" }
       - { src: "../data/nas/services/couchpotato.service", dest: "/etc/systemd/system/couchpotato.service" }
       - { src: "../data/nas/services/transmission-daemon.service", dest: "/lib/systemd/system/transmission-daemon.service" }
       - { src: "../data/nas/services/lidarr.service", dest: "/lib/systemd/system/lidarr.service" }
       - { src: "../data/nas/services/radarr.service", dest: "/lib/systemd/system/radarr.service" }
            
      
    - name: Disable services
      service:
        name: "{{ item }}"
        enabled: no
      become: yes
      with_items:
       - "systemd-resolved"
       
    - name: Enable services
      service:
        name: "{{ item }}"
        enabled: yes
      become: yes
      with_items:
       - "sonarr.service"
       - "transmission-daemon"
       - "plexmediaserver"
       - "apache2"
       - "jackett"
       - "couchpotato"
       - "minidlna"
       - "smbd"
       - "lidarr"
       - "radarr"

       
    - name: Create post install folders
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner }}"
        mode: "{{ item.permissions }}"
      become: yes
      with_items:
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.couchpotato", owner: "{{ vm_vars.vminfo.service_user }}", permissions: "0755" }

      
      
    - name: Copy all post installation files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
      become: yes
      with_items:
       - { src: "../data/nas/Ombi", dest: "/etc/" }
       - { src: "../data/nas/resolv.conf", dest: "/etc/resolv.conf" }
       - { src: "../data/nas/heimdall/database", dest: "/opt/heimdall/database" }
       - { src: "../data/nas/apache2/apache2-config.conf", dest: "/etc/apache2/sites-enabled/000-default.conf" }
       - { src: "../data/nas/heimdall/database", dest: "/opt/heimdall/database" }
       - { src: "../data/nas/couchpotato/settings.conf", dest: "/home/{{ vm_vars.vminfo.service_user }}/.couchpotato/settings.conf" }
       - { src: "../data/nas/dnsmasq.conf", dest: "/etc/dnsmasq.conf" }
       - { src: "../data/nas/samba/smb.conf", dest: "/etc/samba/smb.conf" }
       - { src: "../data/nas/transmission/settings.json", dest: "/etc/transmission-daemon/settings.json" }
       - { src: "../data/nas/jackett/keypairs", dest: "/home/{{ vm_vars.vminfo.service_user }}/.config/.mono/" }
       - { src: "../data/nas/jackett/Jackett", dest: "/home/{{ vm_vars.vminfo.service_user }}/.config/" }
       - { src: "../data/nas/lidarr/Lidarr", dest: "/home/{{ vm_vars.vminfo.service_user }}/.config/" }
       - { src: "../data/nas/radarr/Radarr", dest: "/home/{{ vm_vars.vminfo.service_user }}/.config/" }
       - { src: "../data/nas/100-static.yaml", dest: "/etc/netplan/100-static.yaml" }
       
       
      
      
      
    - name: Set all permissions
      file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        state: "{{ item.state }}"
        mode: "{{ item.mode }}"
        recurse: "{{ item.recurse }}"
        group: "{{ item.group }}"
      become: yes
      with_items:
      
       - { path: "/opt/Ombi", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/etc/Ombi", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/opt/NzbDrone", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.config/NzbDrone/", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.couchpotato", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.composer", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0777", recurse: "yes" }
       - { path: "/opt/heimdall/", owner: "www-data", group: "www-data", state: "directory", mode: "0777", recurse: "yes" }
       - { path: "/etc/transmission-daemon/", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.couchpotato/", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/etc/dnsmasq/", owner: "{{ vm_vars.vminfo.service_user }}", group: "root", state: "directory", mode: "0777", recurse: "yes" }
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.config/.mono/keypairs", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0700", recurse: "yes" }
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.config/Jackett", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.config/Lidarr", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }
       - { path: "/home/{{ vm_vars.vminfo.service_user }}/.config/Radarr", owner: "{{ vm_vars.vminfo.service_user }}", group: "{{ vm_vars.vminfo.service_user }}", state: "directory", mode: "0755", recurse: "yes" }

       
       
 #Reconfigure VM to use permanent NIC port groups and reboot. 
 - name: ESX Cleanup
   hosts: esxi
   gather_facts: false
   tasks:        
   
   
   
    - name: Shutdown VM
      vmware_guest:
        hostname: "{{ hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        folder: "{{ vm_vars.paths.target_folder }}"
        datastore: "{{ vm_vars.paths.target_datastore }}"
        guest_id: "{{ vm_vars.vminfo.guest_id }}"
        name: "{{ vm_vars.vminfo.vm_id }}"
        validate_certs: "{{ vm_vars.options.validate_certs }}"  
        state: shutdownguest
      delegate_to: localhost
   
    - name: Reconfigure NICs
      vmware_guest:
        hostname: "{{ hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        folder: "{{ vm_vars.paths.target_folder }}"
        datastore: "{{ vm_vars.paths.target_datastore }}"
        guest_id: "{{ vm_vars.vminfo.guest_id }}"
        name: "{{ vm_vars.vminfo.vm_id }}"
        networks: "{{ vm_vars.vminfo.networks }}"
        wait_for_ip_address: yes  
        validate_certs: "{{ vm_vars.options.validate_certs }}"  
      delegate_to: localhost
      register: postnicstate
      
    - name: Reboot and wait for new IP
      vmware_guest:
        hostname: "{{ hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        folder: "{{ vm_vars.paths.target_folder }}"
        datastore: "{{ vm_vars.paths.target_datastore }}"
        guest_id: "{{ vm_vars.vminfo.guest_id }}"
        name: "{{ vm_vars.vminfo.vm_id }}"
        validate_certs: "{{ vm_vars.options.validate_certs }}"  
        state: poweredon
        wait_for_ip_address: yes  
      delegate_to: localhost
      register: postnicstate